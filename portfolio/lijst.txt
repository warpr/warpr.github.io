




musicbrainz:







side projects:


name: DATA×DATA
url:  https://frob.nl/DATAxDATA/
date: January 2013
tech: nodejs, mysql
description: Most web analytics systems are designed to track users, which raises
privacy concerns. DATA×DATA is designed to only log screen resolution
and browser version for each page view, which is what I'm interested
in as a web developer.


name: autoincrement.org
url:  http://autoincrement.org/
date: November 2012
tech: haskell, mysql
description: autoincrement.org is a silly domain originally intended as a way to
mint user-friendly identifiers for documents stored in NoSQL databases
which do not have an autoincrement type or sequence common in SQL
databases.  I now just re-implement it whenever I want to learn a new
web framework or programming language.  Past implementations have been
in Python and [Opa](http://opalang.org/), the current version is
written in Haskell.


name: LicenseDB
url:  https://licensedb.org/
date: Feb 2012 -
tech: RDF, node.js, PHP, python
description: The License Database is intended to be a metadata
database about open source / free software / free culture copyright
licenses.  The database is implemented as a set of git versioned
turtle files, from which HTML/RDFa, RDF/XML and JSON-LD files are
generated.  A hodge podge of scripts glue everything together.  I
would like to reimplement all of this in a more coherent manner.


name: senet.org
url:  https://gitorious.org/senet/
date: April 2012 - October 2012 (unfinished)
tech: RDF, Javascript, Python, CouchDB
description: senet.org is intended to be a metadata database about videogames.
This project was largely about experimenting with RDF, so storing data
in the database in way that makes it accessible for webservice clients
as e.g. RDF/XML or JSON-LD or for website visitors as RDFa.  But more
importantly trying to express with RDF how a data entry form should be
rendered and validated.


name: testloop.org
url:  https://testloop.org/
date: August 2011 - April 2012
tech: Python, Qt
description: testloop was intended to GUI testrunner based around the
idea of continuous testing.  The idea is to use per-test coverage data
to predict which tests will likely fail after a particular change to
the source tree, and then instantly run those tests instead of simply
running the entire test suite continuously.  I got this to a
proof-of-concept stage but then abandoned it, as continuous
integration tools like jenkins are often Good Enough.


